BLOGPOST(1)
===========
Stuart Rackham


NAME
----
blogpost - WordPress weblog client


SYNOPSIS
--------
*blogpost* ['OPTIONS'] 'COMMAND' ['BLOG_FILE']


DESCRIPTION
-----------
A WordPress command-line weblog. It creates and updates weblog entries
directly from AsciiDoc (or HTML) source documents. You can also delete
and list weblog entries from the command-line.

- Manages WordPress Posts and Pages.
- Automatically uploads media files (images, video, audio).
- Only posts new or modified content and media files.
- Manages WordPress weblog categories.


COMMANDS
--------
*c, create*::
  Create a new weblog post using the contents of the 'BLOG_FILE'.

*cat, categories*::
  Specify the '--categories' option and either a 'BLOG_FILE' or a
  '--post-id' to set the Post categories.  If the '--categories'
  option is not specified then all weblog categories are listed.

*d, delete*::
  Delete weblog post. Deletes the 'BLOG_FILE' blogpost cache
  file but not the 'BLOG_FILE'.

*i, info*::
  Print weblog post information. Information is sourced from the
  client-side 'BLOG_FILE' blogpost cache file.

*l, list*::
  List recent weblog Posts. Information is sourced directly from
  WordPress server. Use the '--pages' option to list published Pages.

*p, post*::
  Post the weblog post. This is the same as the 'create' command if a
  new post, or the 'update' command if previously posted.

*o, output*::
  Convert the AsciiDoc 'BLOG_FILE' to HTML and print on 'stdout'.

*u, update*::
  Update existing weblog post with the contents of the 'BLOG_FILE'.


OPTIONS
-------
*--version*::
  Show program's version number and exit.

*-h, --help*::
  Show this help message and exit.

*-f, --conf-file*='CONF_FILE'::
  Use configuration file 'CONF_FILE'. This file is read after the
  (optional) implicit '$HOME/.blogpost' configuration file.

*-u, --unpublish*::
  Set weblog post status to 'unpublished'.
  Applicable to 'create', 'update' or 'post' commands.

*-U, --publish*::
  Set weblog post status to 'published'.
  Applicable to 'create', 'update' or 'post' commands.

*--post-id*='POST_ID'::
  Explicitly specify the weblog post ID number. This option will only
  be necessary when there is no client-side 'BLOG_FILE' cache file.
  Applies to 'delete' and 'update' commands.

*-p, --pages*::
  Apply 'COMMAND' to weblog 'Pages' rather than normal weblog 'Posts'.
  Applicable to 'create', 'delete', 'list', 'post' and 'update' commands.

*-M, --no-media*::
  Do not upload media files.
  Applicable to 'create', 'update' or 'post' commands.

*--media-dir=MEDIA_DIR*::
  The name of the directory containing those media files that have
  URLs with relative path names. Defaults to the same directory as the
  'BLOG_FILE'. The media file path is generated by joining 'MEDIA_DIR'
  with the relative path name.

*-t, --title*='TITLE'::
  Set the weblog post title If this option is omitted and there is no
  cache file and the 'BLOG_FILE' is an AsciiDoc file then the title
  will be read from the 'BLOG_FILE'.
  Applicable to 'create', 'update' or 'post' commands.

*-d, --doctype*='DOCTYPE'::
  Specifies the type of 'BLOG_FILE'. Allowed values are 'html'
  (WordPress compatible HTML file) or an AsciiDoc document type
  ('article', 'book' or 'manpage'). Default document type is
  'article'. If you use the 'html' doctype be aware that WordPress
  does not handle all HTML tags, this is not an issue with the
  AsciiDoc doctype values because AsciiDoc generates WordPress
  friendly HTML.
  Applicable to 'create', 'update' or 'post' commands.

*-c, --categories*='CATEGORIES'::
  A comma separated list of categories that will be assigned to the
  weblog post. Prefixing 'CATEGORIES' with a plus or minus character
  adds or removes the categories from an existing post. Category names
  are case insensitive. If an assigned category does not already exist
  it will be created.
  Applicable to 'categories', 'create, 'update' or 'post' commands.

*--force*::
  Force blog file and media files to upload even if they have not been
  modified since the last update command.

*-n, --dry-run*::
  Simulate command execution without doing anything, instead report
  what would have been done.

*-v, --verbose*::
  Print more information about the actions being performed to
  'stdout'. Combine this option with '--dry-run' to view the uploaded
  HTML.

'blogpost' saves the values set by the following options in the
'BLOG_FILE' blogpost cache file: '--doctype', '--doctype', '--pages',
'--post-id', '--publish', '--unpublish' and '--title'.  This means
that once a weblog post has been created you won't need to use them in
subsequent commands unless you decide to change them.


[[X1]]
METADATA CACHING
----------------
You can upload media files to the WordPress server using XML-RPC but
there is currently no way to programmatically list or delete media
files held on the server.  Blindly uploading new copies to the server
every time the document is updated is an unacceptable.

To overcome this problem 'blogpost' retains information about
previously uploaded media (source paths, server URLs and media file
MD5 checksums) in client-side per-document cache files.  Cache files
are stored in the same directory as the source 'BLOG_FILE' but with
'.blogpost' file name extensions. A document's cache file is read
before 'blogpost' runs a command and is updated after running 'create'
and 'update' commands.  The 'delete' and 'reset' commands delete a
document's cache file.

'blogpost' uses cache files to ensure only new or modified media files
are uploaded to the WordPress server.  Because the caching is on a
per-document basis, media files are not shared between documents.

In addition to storing media metadata, blogpost cache files also store
the weblog post ID, URL, title, creation and update timestamps along
with the last used value of many of the 'blogpost' command options.
This is very handy, it means you don't have to remember the weblog
post ID or the options you used to create the weblog when you run the
'update' command (unless of course you want to change something).


MEDIA PROCESSING
----------------
The generated HTML content is scanned for HTML anchor ('a') and image
('img') tags, if these tags refer to local media files then they are
processed as follows:

- The 'BLOG_FILE' cache (see <<X1,'METADATA CACHING'>>) is checked to
  see if the media file has been previously uploaded, if it has then
  the media file is checked (using an MD5 checksum) to see if it has
  changed.
- If the media file is new or has changed then it is uploaded to the
  server.
- Finally the media file reference in the HTML content is replaced
  with the server URL of the uploaded media file.

You can disable media processing with the '--no-media' option.

Allowable media file types are: 'gif', 'jpg', 'jpeg', 'png', 'pdf',
'doc', 'odt',  'mp3', 'ogg', 'wav', 'm4a', 'mov', 'wmv', 'avi', 'mpg'.
Note that not all WordPress servers support all media file types, if
you get an 'Invalid file type' the file type is not supported -- check
with your WordPress hoster, they may have upgrade options which will
allow you to upload.


POSTS AND PAGES
---------------
There are two types of WordPress content, 'Posts' and 'Pages'.  A
'Post' is the WordPress term for a regular blog entry whereas a 'Page'
(sometimes called a 'static page') is an entry that lies outside the
normal blog chronology. WordPress manages Posts and Pages separately
-- use the '--pages' option to differentiate between the two. See
http://codex.wordpress.org/Pages[] for a detailed explanation.


EXAMPLES
--------
Create, list, update and delete a weblog post:

  blogpost.py create blogging_with_asciidoc.txt
  blogpost.py info blogging_with_asciidoc.txt
  blogpost.py list
  blogpost.py update blogging_with_asciidoc.txt
  blogpost.py delete blogging_with_asciidoc.txt


RESOURCES
---------
Project repository: http://hg.sharesource.org/blogpost/[]

Python WordPress library: http://www.blackbirdblog.it/programmazione/progetti/28[]

AsciiDoc: http://www.methods.co.nz/asciidoc/[]

WordPress.org: http://wordpress.org/[]


AUTHOR
------
Written by Stuart Rackham, <mailto:srackham@gmail.com[]>


COPYING
-------
Copyright \(C) 2008 Stuart Rackham. Free use of this software is
granted under the terms of the MIT License.

