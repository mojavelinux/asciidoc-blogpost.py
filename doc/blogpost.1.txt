BLOGPOST(1)
===========
Stuart Rackham <srackham@methods.co.nz>


NAME
----
blogpost - WordPress weblog client for AsciiDoc


SYNOPSIS
--------
*blogpost* ['OPTIONS'] 'COMMAND' ['BLOG_FILE']


DESCRIPTION
-----------
A WordPress command-line weblog client for AsciiDoc.  Creates and
updates weblog entries directly from AsciiDoc source documents. You
can also delete and list weblog entries from the command-line.

- Manages WordPress Posts and Pages.
- Automatically posts blog file images.
- Only posts new or modified blog images.


COMMANDS
--------
*c, create*::
  Create a new weblog post using the contents of the 'BLOG_FILE'.

*d, delete*::
  Delete weblog post. Deletes the 'BLOG_FILE' blogpost cache
  file but not the 'BLOG_FILE'.

*i, info*::
  Print weblog post information. Information is sourced from the
  client-side 'BLOG_FILE' blogpost cache file.

*l, list*::
  List recent weblog Posts. Information is sourced directly from
  WordPress server. Use the '--pages' option to list published Pages.

*r, reset*::
  Delete the 'BLOG_FILE' blogpost cache file.  Executing this command
  will force the next update to upload all media (images) irrespective
  of whether or not they were previously uploaded.  You won't normally
  need to use this command.

*u, update*::
  Update existing weblog post with the contents of the 'BLOG_FILE'.


OPTIONS
-------
*--version*::
  Show program's version number and exit.

*-h, --help*::
  Show this help message and exit.

*-f, --conf-file*='CONF_FILE'::
  Use configuration file 'CONF_FILE'. This file is read after the
  (optional) implicit '$HOME/.blogpost' configuration file.

*-u, --unpublish*::
  Set weblog post status to 'unpublished'.
  Applicable to 'create' and 'update' commands.

*-U, --publish*::
  Set weblog post status to 'published'.
  Applicable to 'create' and 'update' commands.

*--post-id*='POST_ID'::
  Explicitly specify the weblog post ID number. This option will only
  be necessary when there is no client-side 'BLOG_FILE' cache file.
  Applies to 'delete' and 'update' commands.

*-p, --pages*::
  Apply 'COMMAND' to weblog 'Pages' rather than normal weblog 'Posts'.
  Applicable to 'create', 'delete', 'list' and 'update' commands.

*-M, --no-media*::
  Do not upload 'BLOG_FILE' media files (images).

*-t, --title*='TITLE'::
  Set the weblog post title If this option is omitted and there is no
  cache file and the 'BLOG_FILE' is an AsciiDoc file then the title
  will be read from the 'BLOG_FILE'.
  Applicable to 'create' and 'update' commands.

*-d, --doctype*='DOCTYPE'::
  Specifies the type of 'BLOG_FILE'. Allowed values are 'html'
  (WordPress compatible HTML file) or an AsciiDoc document type
  ('article', 'book' or 'manpage'). Default document type is
  'article'.
  Applicable to 'create' and 'update' commands.

*-n, --dry-run*::
  Simulate command execution without doing anything, instead report
  what would have been done.

*-v, --verbose*::
  Print more information about the actions being performed to
  'stdout'. Combine this option with '--dry-run' to view the uploaded
  HTML.

'blogpost' saves the values set by the following options in the
'BLOG_FILE' blogpost cache file: '--doctype', '--doctype', '--pages',
'--post-id', '--publish', '--unpublish' and '--title'.  This means
that once a weblog post has been created you won't need to use them in
subsequent commands unless you decide to change them.


METADATA CACHING
----------------
You can upload images to the WordPress server using XML-RPC but there
is currently no way to programmatically list or delete images held on
the server.  Blindly uploading new copies of the images to the server
every time the document is updated is an unacceptable.

To overcome this problem 'blogpost' retains information about
previously uploaded images (source paths, server URLs and image file
MD5 checksums) in client-side per-document cache files.  Cache files
are stored in the same directory as the source 'BLOG_FILE' but with
'.blogpost' file name extensions. A document's cache file is read
before 'blogpost' runs a command and is updated after running 'create'
and 'update' commands.  The 'delete' and 'reset' commands delete a
document's cache file.

'blogpost' uses cache files to ensure only new or modified image files
are uploaded to the WordPress server.  Because the caching is on a
per-document basis, images are not shared between documents.

In addition to storing media metadata, blogpost cache files also store
the weblog post ID, URL, title, creation and update timestamps along
with the last used value of many of the 'blogpost' command options.
This is very handy, it means you don't have to remember the weblog
post ID or the options you used to create the weblog when you run the
'update' command (unless of course you want to change something).


POSTS AND PAGES
---------------
There are two types of WordPress content, 'Posts' and 'Pages'.  A
'Post' is the WordPress term for a regular blog entry whereas a 'Page'
(sometimes called a 'static page') is an entry that lies outside the
normal blog chronology. WordPress manages Posts and Pages separately
-- use the '--pages' option to differentiate between the two. See
http://codex.wordpress.org/Pages[] for a detailed explanation.


EXAMPLES
--------
Create, list, update and delete a weblog post:

  blogpost.py create doc/blogging_with_asciidoc.txt
  blogpost.py info doc/blogging_with_asciidoc.txt
  blogpost.py list
  blogpost.py update doc/blogging_with_asciidoc.txt
  blogpost.py delete doc/blogging_with_asciidoc.txt


RESOURCES
---------
Project repository: http://hg.sharesource.org/blogpost/[]

Python WordPress library: http://www.blackbirdblog.it/programmazione/progetti/28[]

AsciiDoc: http://www.methods.co.nz/asciidoc/[]


AUTHOR
------
Written by Stuart Rackham, <mailto:srackham@methods.co.nz[]>


COPYING
-------
Copyright \(C) 2008 Stuart Rackham. Free use of this software is
granted under the terms of the MIT License.

